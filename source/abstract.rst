.. include:: conf.rst

.. _ch-abstract:

Abstract
========

In this dissertation, new algorithms are presented that perform decision tree (DT) induction, and various possibilities for their implementations are explored, which are then compared among themselves and with the other existing solutions in the open literature for the DT induction. First, the |algo| (Evolutionary Full Tree Induction) algorithm is described and its time complexity is assessed. The implementation of the |algo| algorithm for the PC platform is then compared with several other PC implementations of the existings DT induction algorithms in terms of size and accuracy of the induced DTs and the times of execution. Then, the possibility of the hardware acceleration of the |algo| algorithm is explored and the results of the algorithm profiling are discussed. Based on the profiling results, the hardware co-processor |cop| (Evolutionary Full Tree Induction co-Processor) is proposed and its architecture is described. Next, the hardware-software (HW/SW) co-design implementation of the |algo| algorithm is given, that relies on the |cop| co-processor to perform the most computationaly intensive part of the evolutionary DT induction, namely the DT accuracy evaluation. Finally, the benefits of using the |cop| co-processor in terms of the DT induction speed are discussed on the results of the experiments, where several |algo| algorithm implementations have been compared on the execution times. Then, the algorithm for the induction of the DT ensembles, named |ealgo| (Ensembles Evolutionary Full Tree Induction) is described. First, the benefits of building an ensemble of DTs is discussed on the results of experiments comparing the accuracy of the DT ensembles with the accuracy of the single DTs. Next, the profiling results are presented that reveal the time complexity bottleneck of the |ealgo| algorithm and the |ecop| (DT Ensemble Evolution co-Processor) co-processor is proposed for hardware acceleration of the algorithm. Again, the hardware-software (HW/SW) co-design implementation of the |ealgo| algorithm is described and the results of the experiments comparing the execution speeds of the different |ealgo| algorithm implementations are given.
